#!/bin/bash

NORMAL=$(tput sgr0)
BLUE=$(tput setaf 4)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)
CYAN=$(tput setaf 6)

CLUSTER_NAME="${2:-mycluster}"

function log {
  case $1 in
  debug)  LOG_PREFIX="${BLUE}[DEBUG]${NORMAL}" ;;
  info)   LOG_PREFIX="${GREEN}[INFO]${NORMAL}" ;;
  warn)   LOG_PREFIX="${YELLOW}[WARN]${NORMAL}" ;;
  err)    LOG_PREFIX="${RED}[ERR]${NORMAL}" ;;
  *)      LOG_PREFIX="${GREEN}[INFO]${NORMAL}"
  esac
  echo "${LOG_PREFIX} $2"
}

function command_exists {
  for cmd in "$@"
  do
    if ! command -v $cmd &> /dev/null
    then
      log err "\"$cmd\" command could not be found"
      exit -1
    fi
  done
}

function cluster_exists {
  CLUSTER_LIST=$(k3d cluster list | tail -n +2 | awk '{ print $1 }' )
  while IFS= read -r line
  do
    if [ "$line" = "$1" ]; then return 0; fi
  done <<< "$CLUSTER_LIST"
  return 1
}

command_exists k3d localstack helm

function start {
log info "Creating kubernetes cluster '${CLUSTER_NAME}'..."

if cluster_exists ${CLUSTER_NAME}
then
  log warn "Cluster ${CLUSTER_NAME} already exists. Skipping."
else
  k3d cluster create ${CLUSTER_NAME} > /dev/null 2>&1
fi

log info "Starting localstack..."
if [ -z $(docker ps --format "{{.Names}}" -f 'name=^localstack_main$') ]
then
  localstack start -d > /dev/null 2>&1
else
  log warn "localstack was already running. Skipping."
fi

docker network connect k3d-${CLUSTER_NAME} localstack_main > /dev/null 2>&1
if [ $? -ne 0 ]
then
  log warn "localstack_main container already connected to the network."
fi

LOCALSTACK_IP=$(docker inspect localstack_main | jq -r ".[].NetworkSettings.Networks[\"k3d-${CLUSTER_NAME}\"].IPAddress")
log info "localstack_main container network IP: ${LOCALSTACK_IP}"

log info "Preparing Crossplane Helm repositories"
helm repo add crossplane-stable https://charts.crossplane.io/stable > /dev/null 2>&1
helm repo update > /dev/null 2>&1

log info "Installing Crossplane. This could take a while..."
helm upgrade --install crossplane \
  --create-namespace --namespace crossplane-system \
  crossplane-stable/crossplane --wait > /dev/null 2>&1

log info "Crossplane installed!"

log info "Provisioning AWS provider. Also this could take a while..."

kubectl apply -f -<<EOF > /dev/null 2>&1
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: crossplane-provider-aws
spec:
  package: crossplane/provider-aws:v0.29.0
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: aws-creds
  namespace: crossplane-system
stringData:
  creds: |
    [default]
    aws_access_key_id = test
    aws_secret_access_key = test
EOF

kubectl get crd providerconfigs.aws.crossplane.io > /dev/null 2>&1
if [ $? -ne 0 ]
then
    echo -n "${GREEN}[INFO]${NORMAL} AWS provider not ready yet."
    sleep 2

    while ! kubectl get crd providerconfigs.aws.crossplane.io > /dev/null 2>&1
    do
        echo -n "."
        sleep 2
    done
    echo
else
  log warn "AWS provider already installed. Skipping."
fi

log info "Setting up provider configuration"

kubectl apply -f -<<EOF > /dev/null 2>&1
apiVersion: aws.crossplane.io/v1beta1
kind: ProviderConfig
metadata:
  name: default
spec:
  endpoint:
    url:
      type: Static
      static: http://${LOCALSTACK_IP}:4566
  credentials:
    source: Secret
    secretRef:
      namespace: crossplane-system
      name: aws-creds
      key: creds
EOF

log info "Done!"
}

function stop {
  log info "Stopping localstack"
  if [ -z $(docker ps --format "{{.Names}}" -f 'name=^localstack_main$') ]; then
    log warn "localstack was not running. Skipping."
  else
    localstack stop > /dev/null 2>&1
  fi

  log info "Deleting cluster '${CLUSTER_NAME}'"
  if cluster_exists ${CLUSTER_NAME}; then
    k3d cluster delete ${CLUSTER_NAME} > /dev/null 2>&1
  else
    log warn "Cluster ${CLUSTER_NAME} was not running. Skipping."
  fi

  log info "Done!"
}

case $1 in
  start)  start ;;
  stop)   stop ;;
  *)      echo "Missing command ['start', 'stop']" ;;
esac
